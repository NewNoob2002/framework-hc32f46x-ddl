diff --git "..\\ld\\hc32f46x_param.ld" "..\\ld\\hc32f46x_param.ld"
index fc0136c..7620723 100644
--- "..\\ld\\hc32f46x_param.ld"
+++ "..\\ld\\hc32f46x_param.ld"
@@ -1,3 +1,24 @@
+/*
+ * parameterized linker flag for the HC32F46x SOC.
+ * the linker script has to be pre-processed using the C preprocessor
+ * to allow for parameterization.
+ * 
+ * to do so, run "$CC -C -P -x c -E <SOURCE> -o <TARGET> -D<PARAM_NAME>=<VALUE>"", adding defines as described below.
+ * see https://stackoverflow.com/a/35824964/13942493 
+ *
+ * 
+ * Parameter List:
+ * - LD_FLASH_START: start address of flash memory
+ * - LD_FLASH_SIZE: size of flash memory
+ * - LD_BOOT_MODE: boot mode of the firmware image
+ *   * 1: primary boot mode, e.g. bootloader (default)
+ *   * 2: secondary boot mode, e.g. application firmware (called by a bootloader) (saves ~1.5k flash)
+ *
+ * 
+ * note: previously, ram options were also configurable. 
+ * this was removed to simplify the linker script (all HC32F460 have the same ram anyway)
+ */
+
 /*
 ;*******************************************************************************
 ; * Copyright (C) 2020, Huada Semiconductor Co., Ltd. All rights reserved.
@@ -15,10 +36,40 @@
 /*  Date        2019-03-13                                                   */
 /*****************************************************************************/
 
+/* ensure parameters are defined */
+#ifndef LD_FLASH_START
+  #error "LD_FLASH_START not defined"
+#endif
+
+#ifndef LD_FLASH_SIZE
+  #error "LD_FLASH_SIZE not defined"
+#endif
+
+#ifndef LD_BOOT_MODE
+  #warning "LD_BOOT_MODE not defined, fallback to PRIMARY (1)"
+  #define LD_BOOT_MODE 1
+#endif
+
+/* check if boot mode is valid */
+#if LD_BOOT_MODE != 1 && LD_BOOT_MODE != 2
+  #error "LD_BOOT_MODE must be PRIMARY (1) or SECONDARY (2)"
+#endif
+
+/* check boot mode is allowed */
+#if LD_FLASH_START == 0 && LD_BOOT_MODE != 1
+  #error "bootloader firmware is required to use PRIMARY boot mode!"
+#endif
+
+/* flash start offset reduces effective flash size available */
+#define FLASH_SIZE_REAL (LD_FLASH_SIZE - LD_FLASH_START)
+#if FLASH_SIZE_REAL < 0
+  #error "effective flash size is negative! check your linker script parameters"
+#endif
+
 /* Use contiguous memory regions for simple. */
 MEMORY
 {
-    FLASH       (rx): ORIGIN = 0x00000000, LENGTH = 256K
+    FLASH       (rx): ORIGIN = LD_FLASH_START, LENGTH = FLASH_SIZE_REAL
     OTP         (rx): ORIGIN = 0x03000C00, LENGTH = 1020
     RAM        (rwx): ORIGIN = 0x1FFF8000, LENGTH = 188K
     RET_RAM    (rwx): ORIGIN = 0x200F0000, LENGTH = 4K
@@ -28,18 +79,30 @@ ENTRY(Reset_Handler)
 
 SECTIONS
 {
+    /* vector table: 0x000 - 0x27F + padding  */
     .vectors :
     {
-        . = ALIGN(4);
-        KEEP(*(.vectors))
-        . = ALIGN(4);
-    } >FLASH
+        KEEP(*(.vectors));
 
-    .icg_sec 0x00000400 :
-    {
-        KEEP(*(.icg_sec))
+        #if LD_BOOT_MODE == 1
+            /* add padding to ICG start */
+            . = 0x400;
+        #else
+            /* no padding since ICG is removed */
+            . = 0x280;
+        #endif
     } >FLASH
 
+    #if LD_BOOT_MODE == 1
+        /* ICG: 0x400 - 0x41F*/
+        .icg_sec :
+        {
+            KEEP(*(.icg_sec));
+            . = 0x420;
+        } >FLASH
+    #endif
+
+    /* append all other FLASH sections after */
     .text :
     {
         . = ALIGN(4);
